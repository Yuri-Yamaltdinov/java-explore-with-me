{
  "info": {
    "_postman_id": "64c18d07-927e-49cf-934d-be92ab414c0f",
    "name": "Test Explore With Me - Rate system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26420973"
  },
  "item": [
    {
      "name": "Rate functional",
      "item": [
        {
          "name": "Create Like",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(201);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = pm.collectionVariables.get('response');",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Ответ должен содержать поля: userId, eventId, rate, countLike, countDislike\", function () {",
                  "pm.expect(target).to.have.property('userId');",
                  "pm.expect(target).to.have.property('eventId');",
                  "pm.expect(target).to.have.property('rate');",
                  "pm.expect(target).to.have.property('countLike');",
                  "pm.expect(target).to.have.property('countDislike');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(target.userId).to.not.be.null;",
                  "    pm.expect(target.eventId).to.not.be.null;",
                  "    pm.expect(target.rate).equal(\"LIKE\", 'Оценка должна соответствовать оценке в запросе');",
                  "    pm.expect(target.countLike).equal(1, 'Количество положительных оценок должно увеличится на 1 после выполнения запроса');",
                  "    pm.expect(target.countDislike).equal(0, 'Количество отрицательных оценок не должно измениться');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId?rate=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "query": [
                {
                  "key": "rate",
                  "value": "LIKE",
                  "description": "Нравится/Не нравится(LIKE/DISLIKE)"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete like",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        const rate = await api.createRate(submittedUser.id, event.id, \"DISLIKE\")",
                  "        pm.collectionVariables.set(\"createRate\", rate)",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "const source = pm.collectionVariables.get('createRate');",
                  "const userId = pm.collectionVariables.get('uid');",
                  "",
                  "pm.test(\"Оценка должна быть найдена до выполнения запроса\", function(){",
                  "    pm.expect(source.userId).to.eql(userId);",
                  "    pm.expect(source.rate).to.eql(\"DISLIKE\");",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение популярных мероприятий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "            pm.collectionVariables.set(\"event\", event)",
                  "        event = await api.publishEvent(event.id);",
                  "",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        const rate = await api.createRate(submittedUser.id, event.id, \"LIKE\")",
                  "            pm.collectionVariables.set(\"createRate\", rate)",
                  "",
                  "        const anotherSubmittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, anotherSubmittedUser.id);",
                  "        const anotherRate = await api.createRate(anotherSubmittedUser.id, event.id, \"LIKE\")",
                  "            pm.collectionVariables.set(\"createRate2\", anotherRate)",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(200);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const event = pm.collectionVariables.get('event');",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {",
                  "pm.expect(target[0]).to.have.property('shortOutputEventDto');",
                  "pm.expect(target[0]).to.have.property('rating');",
                  "pm.expect(target[0]).to.have.property('countLike');",
                  "pm.expect(target[0]).to.have.property('countDislike');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(target[0].countLike).equal(2, \"На первом месте должен быть самый популярный ивент\");",
                  "    pm.expect(target[0].shortOutputEventDto.id).equal(event.id, \"Id полученного популярного ивента должно сопадать с созданным\");",
                  "    pm.expect(target[1].countLike).equal(1, \"На втором месте должен быть менее популярный ивент\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/like/top/events/?from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                "top",
                "events",
                ""
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество событий, которые нужно пропустить для формирования текущего набора"
                },
                {
                  "key": "size",
                  "value": "1000",
                  "description": "количество событий в наборе"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий понравившихся пользователю",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        await api.createRate(submittedUser.id, event.id, \"LIKE\")",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const target = pm.response.json()[0];",
                  "",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate\", function () {",
                  "    pm.expect(target).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(target.countLikes).equals(1, \"Количество лайков должно быть не нулевым\");",
                  "    pm.expect(target.countDislikes).equals(0, \"Количество дизлайков должно быть нулевым\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/liked",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "liked"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation",
      "item": [
        {
          "name": "Создание оценки не существующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
                  "    pm.response.to.be.notFound;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId?rate=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "query": [
                {
                  "key": "rate",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "-1"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание оценки не существующему ивенту",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
                  "    pm.response.to.be.notFound;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId?rate=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "query": [
                {
                  "key": "rate",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "-1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Создание не корректной оценки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
                  "    pm.response.to.be.badRequest;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId?rate=Good",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "query": [
                {
                  "key": "rate",
                  "value": "Good"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующей оценки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        ",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
                  "    pm.response.to.be.notFound;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/like/:userId/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                ":userId",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подборки без параметров запроса",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "            pm.collectionVariables.set(\"event\", event)",
                  "        event = await api.publishEvent(event.id);",
                  "",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        const rate = await api.createRate(submittedUser.id, event.id, \"LIKE\")",
                  "            pm.collectionVariables.set(\"createRate\", rate)",
                  "",
                  "        const anotherSubmittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, anotherSubmittedUser.id);",
                  "        const anotherRate = await api.createRate(anotherSubmittedUser.id, event.id, \"LIKE\")",
                  "            pm.collectionVariables.set(\"createRate2\", anotherRate)",
                  "",
                  "        const andAnotherSubmittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, andAnotherSubmittedUser.id);",
                  "        const andAnotherRate = await api.createRate(andAnotherSubmittedUser.id, event.id, \"LIKE\")",
                  "            pm.collectionVariables.set(\"createRate3\", andAnotherRate)",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(200);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const event = pm.collectionVariables.get('event');",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Подборка должны содержать поля: id, title, pinned, events\", function () {",
                  "pm.expect(target[0]).to.have.property('shortOutputEventDto');",
                  "pm.expect(target[0]).to.have.property('rating');",
                  "pm.expect(target[0]).to.have.property('countLike');",
                  "pm.expect(target[0]).to.have.property('countDislike');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(target[0].countLike).equal(3, \"На первом месте должен быть самый популярный ивент\");",
                  "    pm.expect(target[0].shortOutputEventDto.id).equal(event.id, \"Id полученного популярного ивента должно сопадать с созданным\");",
                  "    pm.expect(target[1].countLike).equal(2, \"На втором месте должен быть менее популярный ивент\");",
                  "    pm.expect(target[2].countLike).equal(1, \"На третьем месте должен быть самый не популярный ивент\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/like/top/events/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "like",
                "top",
                "events",
                ""
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий понравившихся НЕ существующему пользователю",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "        await api.createRate(submittedUser.id, event.id, \"LIKE\")",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
                  "    pm.response.to.be.notFound;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/liked",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "liked"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "-1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение пустого списка понравившихся событий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let eventBody = rnd.getEvent(category.id);",
                  "        eventBody['requestModeration'] = false",
                  "        let event = await api.addEvent(user.id, eventBody);",
                  "        event = await api.publishEvent(event.id);",
                  "        const submittedUser = await api.addUser(rnd.getUser());",
                  "        await api.publishParticipationRequest(event.id, submittedUser.id);",
                  "",
                  "        pm.collectionVariables.set(\"uid\", submittedUser.id)",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test(\"Ответ должен быть пустым\", function () {",
                  "    var jsinData = pm.response.json();",
                  "    pm.expect(jsinData.length).to.eql(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/liked",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                "liked"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async createRate(userId, eventId, rate, verbose=null) {",
          "        return this.post(\"/like/\" + userId + \"/events/\" + eventId + \"?rate=\" + rate, null, \"Ошибка добавления оценки\", verbose);",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "createRate",
      "value": ""
    },
    {
      "key": "createRate2",
      "value": ""
    },
    {
      "key": "event",
      "value": ""
    },
    {
      "key": "createRate3",
      "value": ""
    }
  ]
}